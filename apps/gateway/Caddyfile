# global options

{
    admin off                   # theres no need for the admin api in railway's environment
    persist_config off          # storage isn't persistent anyway
    auto_https off              # railway handles https for us, this could in some cases cause issues if left enabled
    # runtime logs
    log {
        format json             # set runtime log format to json mode
        output stdout           # output logs to stdout
    }
    servers {
        trusted_proxies static private_ranges   # trust railway's proxy
    }
}

# settings used across applications

(common_proxy_settings) {
    # load balancing, uses round robin
    lb_policy round_robin
    lb_retries 3                # number of times to retry a failed upstream
    lb_try_duration 10s         # how long to try connecting to an upstream
    lb_try_interval 250ms       # how long to wait between retries

    # passive health checks (marks upstreams as down based on failures)
    fail_duration 60s             # how long an upstream stays down after being marked unhealthy
    max_fails 5                   # number of failures to mark an upstream as down
    unhealthy_latency 5s          # latency considered unhealthy
    unhealthy_request_count 10    # number of requests to observe for unhealthy_latency

    # sets the Host header to the header of the dynamic name and port options
    header_up Host {http.reverse_proxy.upstream.hostport}
    # pass through other important headers
    header_up X-Real-IP {http.request.remote.host} 
}

# ==========================================================

# API Domain Group: curate.fun (mainnet & testnet)

# ==========================================================

app.curate.fun:{$PORT} {
    log { format json }
    handle /api/* {
        reverse_proxy {
            dynamic a {
                name {$API_DOMAIN}
                port {$API_PORT}
                refresh 1s
                dial_timeout 30s
                versions ipv4 ipv6
            }
            import common_proxy_settings
        }
    }

    handle {
        reverse_proxy https://curatedotfun-app-potlock.vercel.app {
            import common_proxy_settings
            # Ensure Vercel gets the original Host header for correct routing on its end
            header_up Host {http.request.host}
        }
    }
}

staging.curate.fun:{$PORT} {
    log { format json }
    @staging_api_requests path /api/*
    reverse_proxy @staging_api_requests {
        dynamic a {
            name {$API_DOMAIN}
            port {$API_PORT}
            refresh 1s
            dial_timeout 30s
            versions ipv4 ipv6
        }
        import common_proxy_settings
    }

    reverse_proxy https://curatedotfun-app-git-staging-potlock.vercel.app {
        import common_proxy_settings
        # Ensure Vercel gets the original Host header for correct routing on its end
        header_up Host {http.request.host}
    }
}

# ==========================================================

# API Domain Group: curate.press (mainnet & testnet)

# ==========================================================

app.curate.press:{$PORT} {
    log { format json }
    handle /api/* {
        reverse_proxy {
            dynamic a {
                name {$API_DOMAIN}
                port {$API_PORT}
                refresh 1s
                dial_timeout 30s
                versions ipv4 ipv6
            }
            import common_proxy_settings
        }
    }

    handle {
        reverse_proxy https://curatedotfun-app-potlock.vercel.app {
            import common_proxy_settings
            # Ensure Vercel gets the original Host header for correct routing on its end
            header_up Host {http.request.host}
        }
    }
}

staging.curate.press:{$PORT} {
    log { format json }
    route /api/* {
        reverse_proxy {
            dynamic a {
                name {$API_DOMAIN}
                port {$API_PORT}
                refresh 1s
                dial_timeout 30s
                versions ipv4 ipv6
            }
            import common_proxy_settings
        }
    }

    route {
        reverse_proxy https://curatedotfun-app-git-staging-potlock.vercel.app {
            import common_proxy_settings
            # Ensure Vercel gets the original Host header for correct routing on its end
            header_up Host {http.request.host}
        }
    }
}

# ==========================================================

# API Domain Group: curate.tools (mainnet & testnet)

# ==========================================================

app.curate.tools:{$PORT} {
    log { format json }
    handle /api/* {
        reverse_proxy {
            dynamic a {
                name {$API_DOMAIN}
                port {$API_PORT}
                refresh 1s
                dial_timeout 30s
                versions ipv4 ipv6
            }
            import common_proxy_settings
        }
    }

    handle {
        reverse_proxy https://curatedotfun-app-potlock.vercel.app {
            import common_proxy_settings
            # Ensure Vercel gets the original Host header for correct routing on its end
            header_up Host {http.request.host}
        }
    }
}

staging.curate.tools:{$PORT} {
    log { format json }
    handle /api/* {
        reverse_proxy {
            dynamic a {
                name {$API_DOMAIN}
                port {$API_PORT}
                refresh 1s
                dial_timeout 30s
                versions ipv4 ipv6
            }
            import common_proxy_settings
        }
    }

    handle {
        reverse_proxy https://curatedotfun-app-git-staging-potlock.vercel.app {
            import common_proxy_settings
            # Ensure Vercel gets the original Host header for correct routing on its end
            header_up Host {http.request.host}
        }
    }
}
