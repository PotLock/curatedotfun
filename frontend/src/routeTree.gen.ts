/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as TestImport } from "./routes/test";
import { Route as SettingsImport } from "./routes/settings";
import { Route as LeaderboardImport } from "./routes/leaderboard";
import { Route as IndexImport } from "./routes/index";
import { Route as SubmissionsIndexImport } from "./routes/submissions/index";
import { Route as ProfileIndexImport } from "./routes/profile/index";
import { Route as FeedIndexImport } from "./routes/feed/index";
import { Route as ExploreIndexImport } from "./routes/explore/index";
import { Route as ProfileRootImport } from "./routes/profile/_root";
import { Route as FeedFeedIdImport } from "./routes/feed/$feedId";
import { Route as ExploreRootImport } from "./routes/explore/_root";
import { Route as CreateFeedImport } from "./routes/create/feed";
import { Route as FeedFeedIdIndexImport } from "./routes/feed/$feedId/index";
import { Route as FeedFeedIdTokenImport } from "./routes/feed/$feedId/token";
import { Route as FeedFeedIdProposalsImport } from "./routes/feed/$feedId/proposals";
import { Route as FeedFeedIdPointsImport } from "./routes/feed/$feedId/points";
import { Route as FeedFeedIdMembersImport } from "./routes/feed/$feedId/members";
import { Route as FeedFeedIdCurationImport } from "./routes/feed/$feedId/curation";
import { Route as FeedFeedIdSettingsIndexImport } from "./routes/feed/$feedId/settings/index";
import { Route as FeedFeedIdSettingsConnectedImport } from "./routes/feed/$feedId/settings/connected";

// Create Virtual Routes

const ProfileImport = createFileRoute("/profile")();
const ExploreImport = createFileRoute("/explore")();

// Create/Update Routes

const ProfileRoute = ProfileImport.update({
  id: "/profile",
  path: "/profile",
  getParentRoute: () => rootRoute,
} as any);

const ExploreRoute = ExploreImport.update({
  id: "/explore",
  path: "/explore",
  getParentRoute: () => rootRoute,
} as any);

const TestRoute = TestImport.update({
  id: "/test",
  path: "/test",
  getParentRoute: () => rootRoute,
} as any);

const SettingsRoute = SettingsImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => rootRoute,
} as any);

const LeaderboardRoute = LeaderboardImport.update({
  id: "/leaderboard",
  path: "/leaderboard",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const SubmissionsIndexRoute = SubmissionsIndexImport.update({
  id: "/submissions/",
  path: "/submissions/",
  getParentRoute: () => rootRoute,
} as any);

const ProfileIndexRoute = ProfileIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => ProfileRoute,
} as any);

const FeedIndexRoute = FeedIndexImport.update({
  id: "/feed/",
  path: "/feed/",
  getParentRoute: () => rootRoute,
} as any);

const ExploreIndexRoute = ExploreIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => ExploreRoute,
} as any);

const ProfileRootRoute = ProfileRootImport.update({
  id: "/_root",
  getParentRoute: () => ProfileRoute,
} as any);

const FeedFeedIdRoute = FeedFeedIdImport.update({
  id: "/feed/$feedId",
  path: "/feed/$feedId",
  getParentRoute: () => rootRoute,
} as any);

const ExploreRootRoute = ExploreRootImport.update({
  id: "/_root",
  getParentRoute: () => ExploreRoute,
} as any);

const CreateFeedRoute = CreateFeedImport.update({
  id: "/create/feed",
  path: "/create/feed",
  getParentRoute: () => rootRoute,
} as any);

const FeedFeedIdIndexRoute = FeedFeedIdIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => FeedFeedIdRoute,
} as any);

const FeedFeedIdTokenRoute = FeedFeedIdTokenImport.update({
  id: "/token",
  path: "/token",
  getParentRoute: () => FeedFeedIdRoute,
} as any);

const FeedFeedIdProposalsRoute = FeedFeedIdProposalsImport.update({
  id: "/proposals",
  path: "/proposals",
  getParentRoute: () => FeedFeedIdRoute,
} as any);

const FeedFeedIdPointsRoute = FeedFeedIdPointsImport.update({
  id: "/points",
  path: "/points",
  getParentRoute: () => FeedFeedIdRoute,
} as any);

const FeedFeedIdMembersRoute = FeedFeedIdMembersImport.update({
  id: "/members",
  path: "/members",
  getParentRoute: () => FeedFeedIdRoute,
} as any);

const FeedFeedIdCurationRoute = FeedFeedIdCurationImport.update({
  id: "/curation",
  path: "/curation",
  getParentRoute: () => FeedFeedIdRoute,
} as any);

const FeedFeedIdSettingsIndexRoute = FeedFeedIdSettingsIndexImport.update({
  id: "/settings/",
  path: "/settings/",
  getParentRoute: () => FeedFeedIdRoute,
} as any);

const FeedFeedIdSettingsConnectedRoute =
  FeedFeedIdSettingsConnectedImport.update({
    id: "/settings/connected",
    path: "/settings/connected",
    getParentRoute: () => FeedFeedIdRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/leaderboard": {
      id: "/leaderboard";
      path: "/leaderboard";
      fullPath: "/leaderboard";
      preLoaderRoute: typeof LeaderboardImport;
      parentRoute: typeof rootRoute;
    };
    "/settings": {
      id: "/settings";
      path: "/settings";
      fullPath: "/settings";
      preLoaderRoute: typeof SettingsImport;
      parentRoute: typeof rootRoute;
    };
    "/test": {
      id: "/test";
      path: "/test";
      fullPath: "/test";
      preLoaderRoute: typeof TestImport;
      parentRoute: typeof rootRoute;
    };
    "/create/feed": {
      id: "/create/feed";
      path: "/create/feed";
      fullPath: "/create/feed";
      preLoaderRoute: typeof CreateFeedImport;
      parentRoute: typeof rootRoute;
    };
    "/explore": {
      id: "/explore";
      path: "/explore";
      fullPath: "/explore";
      preLoaderRoute: typeof ExploreImport;
      parentRoute: typeof rootRoute;
    };
    "/explore/_root": {
      id: "/explore/_root";
      path: "/explore";
      fullPath: "/explore";
      preLoaderRoute: typeof ExploreRootImport;
      parentRoute: typeof ExploreRoute;
    };
    "/feed/$feedId": {
      id: "/feed/$feedId";
      path: "/feed/$feedId";
      fullPath: "/feed/$feedId";
      preLoaderRoute: typeof FeedFeedIdImport;
      parentRoute: typeof rootRoute;
    };
    "/profile": {
      id: "/profile";
      path: "/profile";
      fullPath: "/profile";
      preLoaderRoute: typeof ProfileImport;
      parentRoute: typeof rootRoute;
    };
    "/profile/_root": {
      id: "/profile/_root";
      path: "/profile";
      fullPath: "/profile";
      preLoaderRoute: typeof ProfileRootImport;
      parentRoute: typeof ProfileRoute;
    };
    "/explore/": {
      id: "/explore/";
      path: "/";
      fullPath: "/explore/";
      preLoaderRoute: typeof ExploreIndexImport;
      parentRoute: typeof ExploreImport;
    };
    "/feed/": {
      id: "/feed/";
      path: "/feed";
      fullPath: "/feed";
      preLoaderRoute: typeof FeedIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/profile/": {
      id: "/profile/";
      path: "/";
      fullPath: "/profile/";
      preLoaderRoute: typeof ProfileIndexImport;
      parentRoute: typeof ProfileImport;
    };
    "/submissions/": {
      id: "/submissions/";
      path: "/submissions";
      fullPath: "/submissions";
      preLoaderRoute: typeof SubmissionsIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/feed/$feedId/curation": {
      id: "/feed/$feedId/curation";
      path: "/curation";
      fullPath: "/feed/$feedId/curation";
      preLoaderRoute: typeof FeedFeedIdCurationImport;
      parentRoute: typeof FeedFeedIdImport;
    };
    "/feed/$feedId/members": {
      id: "/feed/$feedId/members";
      path: "/members";
      fullPath: "/feed/$feedId/members";
      preLoaderRoute: typeof FeedFeedIdMembersImport;
      parentRoute: typeof FeedFeedIdImport;
    };
    "/feed/$feedId/points": {
      id: "/feed/$feedId/points";
      path: "/points";
      fullPath: "/feed/$feedId/points";
      preLoaderRoute: typeof FeedFeedIdPointsImport;
      parentRoute: typeof FeedFeedIdImport;
    };
    "/feed/$feedId/proposals": {
      id: "/feed/$feedId/proposals";
      path: "/proposals";
      fullPath: "/feed/$feedId/proposals";
      preLoaderRoute: typeof FeedFeedIdProposalsImport;
      parentRoute: typeof FeedFeedIdImport;
    };
    "/feed/$feedId/token": {
      id: "/feed/$feedId/token";
      path: "/token";
      fullPath: "/feed/$feedId/token";
      preLoaderRoute: typeof FeedFeedIdTokenImport;
      parentRoute: typeof FeedFeedIdImport;
    };
    "/feed/$feedId/": {
      id: "/feed/$feedId/";
      path: "/";
      fullPath: "/feed/$feedId/";
      preLoaderRoute: typeof FeedFeedIdIndexImport;
      parentRoute: typeof FeedFeedIdImport;
    };
    "/feed/$feedId/settings/connected": {
      id: "/feed/$feedId/settings/connected";
      path: "/settings/connected";
      fullPath: "/feed/$feedId/settings/connected";
      preLoaderRoute: typeof FeedFeedIdSettingsConnectedImport;
      parentRoute: typeof FeedFeedIdImport;
    };
    "/feed/$feedId/settings/": {
      id: "/feed/$feedId/settings/";
      path: "/settings";
      fullPath: "/feed/$feedId/settings";
      preLoaderRoute: typeof FeedFeedIdSettingsIndexImport;
      parentRoute: typeof FeedFeedIdImport;
    };
  }
}

// Create and export the route tree

interface ExploreRouteChildren {
  ExploreRootRoute: typeof ExploreRootRoute;
  ExploreIndexRoute: typeof ExploreIndexRoute;
}

const ExploreRouteChildren: ExploreRouteChildren = {
  ExploreRootRoute: ExploreRootRoute,
  ExploreIndexRoute: ExploreIndexRoute,
};

const ExploreRouteWithChildren =
  ExploreRoute._addFileChildren(ExploreRouteChildren);

interface FeedFeedIdRouteChildren {
  FeedFeedIdCurationRoute: typeof FeedFeedIdCurationRoute;
  FeedFeedIdMembersRoute: typeof FeedFeedIdMembersRoute;
  FeedFeedIdPointsRoute: typeof FeedFeedIdPointsRoute;
  FeedFeedIdProposalsRoute: typeof FeedFeedIdProposalsRoute;
  FeedFeedIdTokenRoute: typeof FeedFeedIdTokenRoute;
  FeedFeedIdIndexRoute: typeof FeedFeedIdIndexRoute;
  FeedFeedIdSettingsConnectedRoute: typeof FeedFeedIdSettingsConnectedRoute;
  FeedFeedIdSettingsIndexRoute: typeof FeedFeedIdSettingsIndexRoute;
}

const FeedFeedIdRouteChildren: FeedFeedIdRouteChildren = {
  FeedFeedIdCurationRoute: FeedFeedIdCurationRoute,
  FeedFeedIdMembersRoute: FeedFeedIdMembersRoute,
  FeedFeedIdPointsRoute: FeedFeedIdPointsRoute,
  FeedFeedIdProposalsRoute: FeedFeedIdProposalsRoute,
  FeedFeedIdTokenRoute: FeedFeedIdTokenRoute,
  FeedFeedIdIndexRoute: FeedFeedIdIndexRoute,
  FeedFeedIdSettingsConnectedRoute: FeedFeedIdSettingsConnectedRoute,
  FeedFeedIdSettingsIndexRoute: FeedFeedIdSettingsIndexRoute,
};

const FeedFeedIdRouteWithChildren = FeedFeedIdRoute._addFileChildren(
  FeedFeedIdRouteChildren,
);

interface ProfileRouteChildren {
  ProfileRootRoute: typeof ProfileRootRoute;
  ProfileIndexRoute: typeof ProfileIndexRoute;
}

const ProfileRouteChildren: ProfileRouteChildren = {
  ProfileRootRoute: ProfileRootRoute,
  ProfileIndexRoute: ProfileIndexRoute,
};

const ProfileRouteWithChildren =
  ProfileRoute._addFileChildren(ProfileRouteChildren);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/leaderboard": typeof LeaderboardRoute;
  "/settings": typeof SettingsRoute;
  "/test": typeof TestRoute;
  "/create/feed": typeof CreateFeedRoute;
  "/explore": typeof ExploreRootRoute;
  "/feed/$feedId": typeof FeedFeedIdRouteWithChildren;
  "/profile": typeof ProfileRootRoute;
  "/explore/": typeof ExploreIndexRoute;
  "/feed": typeof FeedIndexRoute;
  "/profile/": typeof ProfileIndexRoute;
  "/submissions": typeof SubmissionsIndexRoute;
  "/feed/$feedId/curation": typeof FeedFeedIdCurationRoute;
  "/feed/$feedId/members": typeof FeedFeedIdMembersRoute;
  "/feed/$feedId/points": typeof FeedFeedIdPointsRoute;
  "/feed/$feedId/proposals": typeof FeedFeedIdProposalsRoute;
  "/feed/$feedId/token": typeof FeedFeedIdTokenRoute;
  "/feed/$feedId/": typeof FeedFeedIdIndexRoute;
  "/feed/$feedId/settings/connected": typeof FeedFeedIdSettingsConnectedRoute;
  "/feed/$feedId/settings": typeof FeedFeedIdSettingsIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/leaderboard": typeof LeaderboardRoute;
  "/settings": typeof SettingsRoute;
  "/test": typeof TestRoute;
  "/create/feed": typeof CreateFeedRoute;
  "/explore": typeof ExploreIndexRoute;
  "/profile": typeof ProfileIndexRoute;
  "/feed": typeof FeedIndexRoute;
  "/submissions": typeof SubmissionsIndexRoute;
  "/feed/$feedId/curation": typeof FeedFeedIdCurationRoute;
  "/feed/$feedId/members": typeof FeedFeedIdMembersRoute;
  "/feed/$feedId/points": typeof FeedFeedIdPointsRoute;
  "/feed/$feedId/proposals": typeof FeedFeedIdProposalsRoute;
  "/feed/$feedId/token": typeof FeedFeedIdTokenRoute;
  "/feed/$feedId": typeof FeedFeedIdIndexRoute;
  "/feed/$feedId/settings/connected": typeof FeedFeedIdSettingsConnectedRoute;
  "/feed/$feedId/settings": typeof FeedFeedIdSettingsIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/leaderboard": typeof LeaderboardRoute;
  "/settings": typeof SettingsRoute;
  "/test": typeof TestRoute;
  "/create/feed": typeof CreateFeedRoute;
  "/explore": typeof ExploreRouteWithChildren;
  "/explore/_root": typeof ExploreRootRoute;
  "/feed/$feedId": typeof FeedFeedIdRouteWithChildren;
  "/profile": typeof ProfileRouteWithChildren;
  "/profile/_root": typeof ProfileRootRoute;
  "/explore/": typeof ExploreIndexRoute;
  "/feed/": typeof FeedIndexRoute;
  "/profile/": typeof ProfileIndexRoute;
  "/submissions/": typeof SubmissionsIndexRoute;
  "/feed/$feedId/curation": typeof FeedFeedIdCurationRoute;
  "/feed/$feedId/members": typeof FeedFeedIdMembersRoute;
  "/feed/$feedId/points": typeof FeedFeedIdPointsRoute;
  "/feed/$feedId/proposals": typeof FeedFeedIdProposalsRoute;
  "/feed/$feedId/token": typeof FeedFeedIdTokenRoute;
  "/feed/$feedId/": typeof FeedFeedIdIndexRoute;
  "/feed/$feedId/settings/connected": typeof FeedFeedIdSettingsConnectedRoute;
  "/feed/$feedId/settings/": typeof FeedFeedIdSettingsIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/leaderboard"
    | "/settings"
    | "/test"
    | "/create/feed"
    | "/explore"
    | "/feed/$feedId"
    | "/profile"
    | "/explore/"
    | "/feed"
    | "/profile/"
    | "/submissions"
    | "/feed/$feedId/curation"
    | "/feed/$feedId/members"
    | "/feed/$feedId/points"
    | "/feed/$feedId/proposals"
    | "/feed/$feedId/token"
    | "/feed/$feedId/"
    | "/feed/$feedId/settings/connected"
    | "/feed/$feedId/settings";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/leaderboard"
    | "/settings"
    | "/test"
    | "/create/feed"
    | "/explore"
    | "/profile"
    | "/feed"
    | "/submissions"
    | "/feed/$feedId/curation"
    | "/feed/$feedId/members"
    | "/feed/$feedId/points"
    | "/feed/$feedId/proposals"
    | "/feed/$feedId/token"
    | "/feed/$feedId"
    | "/feed/$feedId/settings/connected"
    | "/feed/$feedId/settings";
  id:
    | "__root__"
    | "/"
    | "/leaderboard"
    | "/settings"
    | "/test"
    | "/create/feed"
    | "/explore"
    | "/explore/_root"
    | "/feed/$feedId"
    | "/profile"
    | "/profile/_root"
    | "/explore/"
    | "/feed/"
    | "/profile/"
    | "/submissions/"
    | "/feed/$feedId/curation"
    | "/feed/$feedId/members"
    | "/feed/$feedId/points"
    | "/feed/$feedId/proposals"
    | "/feed/$feedId/token"
    | "/feed/$feedId/"
    | "/feed/$feedId/settings/connected"
    | "/feed/$feedId/settings/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  LeaderboardRoute: typeof LeaderboardRoute;
  SettingsRoute: typeof SettingsRoute;
  TestRoute: typeof TestRoute;
  CreateFeedRoute: typeof CreateFeedRoute;
  ExploreRoute: typeof ExploreRouteWithChildren;
  FeedFeedIdRoute: typeof FeedFeedIdRouteWithChildren;
  ProfileRoute: typeof ProfileRouteWithChildren;
  FeedIndexRoute: typeof FeedIndexRoute;
  SubmissionsIndexRoute: typeof SubmissionsIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LeaderboardRoute: LeaderboardRoute,
  SettingsRoute: SettingsRoute,
  TestRoute: TestRoute,
  CreateFeedRoute: CreateFeedRoute,
  ExploreRoute: ExploreRouteWithChildren,
  FeedFeedIdRoute: FeedFeedIdRouteWithChildren,
  ProfileRoute: ProfileRouteWithChildren,
  FeedIndexRoute: FeedIndexRoute,
  SubmissionsIndexRoute: SubmissionsIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/leaderboard",
        "/settings",
        "/test",
        "/create/feed",
        "/explore",
        "/feed/$feedId",
        "/profile",
        "/feed/",
        "/submissions/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/leaderboard": {
      "filePath": "leaderboard.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/create/feed": {
      "filePath": "create/feed.tsx"
    },
    "/explore": {
      "filePath": "explore",
      "children": [
        "/explore/_root",
        "/explore/"
      ]
    },
    "/explore/_root": {
      "filePath": "explore/_root.tsx",
      "parent": "/explore"
    },
    "/feed/$feedId": {
      "filePath": "feed/$feedId.tsx",
      "children": [
        "/feed/$feedId/curation",
        "/feed/$feedId/members",
        "/feed/$feedId/points",
        "/feed/$feedId/proposals",
        "/feed/$feedId/token",
        "/feed/$feedId/",
        "/feed/$feedId/settings/connected",
        "/feed/$feedId/settings/"
      ]
    },
    "/profile": {
      "filePath": "profile",
      "children": [
        "/profile/_root",
        "/profile/"
      ]
    },
    "/profile/_root": {
      "filePath": "profile/_root.tsx",
      "parent": "/profile"
    },
    "/explore/": {
      "filePath": "explore/index.tsx",
      "parent": "/explore"
    },
    "/feed/": {
      "filePath": "feed/index.tsx"
    },
    "/profile/": {
      "filePath": "profile/index.tsx",
      "parent": "/profile"
    },
    "/submissions/": {
      "filePath": "submissions/index.tsx"
    },
    "/feed/$feedId/curation": {
      "filePath": "feed/$feedId/curation.tsx",
      "parent": "/feed/$feedId"
    },
    "/feed/$feedId/members": {
      "filePath": "feed/$feedId/members.tsx",
      "parent": "/feed/$feedId"
    },
    "/feed/$feedId/points": {
      "filePath": "feed/$feedId/points.tsx",
      "parent": "/feed/$feedId"
    },
    "/feed/$feedId/proposals": {
      "filePath": "feed/$feedId/proposals.tsx",
      "parent": "/feed/$feedId"
    },
    "/feed/$feedId/token": {
      "filePath": "feed/$feedId/token.tsx",
      "parent": "/feed/$feedId"
    },
    "/feed/$feedId/": {
      "filePath": "feed/$feedId/index.tsx",
      "parent": "/feed/$feedId"
    },
    "/feed/$feedId/settings/connected": {
      "filePath": "feed/$feedId/settings/connected.tsx",
      "parent": "/feed/$feedId"
    },
    "/feed/$feedId/settings/": {
      "filePath": "feed/$feedId/settings/index.tsx",
      "parent": "/feed/$feedId"
    }
  }
}
ROUTE_MANIFEST_END */
